#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;

uniform mat4 transformationMatrix;	
uniform mat4 projectionMatrix;		
uniform mat4 viewMatrix;			
uniform vec3 lightPosition[4];			
uniform float useFakeLighting;
uniform vec4 plane;

uniform float numberOfRows;
uniform vec2 offset;

const float density = 0.0035;
const float gradient = 5.0;

void main() {
	vec4 worldPosition = transformationMatrix * vec4(position,1.0); 
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * positionRelativeToCam;  	
	pass_textureCoords = (textureCoords / numberOfRows) + offset;
	
	gl_ClipDistance[0] = dot(worldPosition, plane);
	
	vec3 actualNormal = normal;
	if (useFakeLighting > 0.5){
		actualNormal = vec3(0.0, 1.0, 0.0);
	}
	surfaceNormal = (transformationMatrix * vec4(actualNormal, 0.0)).xyz; 
	//vec3 lightPosition2 = (transformationMatrix * vec4(lightPosition, 0.0)).xyz; //this will make the light source travel with the entity
	for (int i = 0; i < 4; i++) {
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance*density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);
}



/*
CONVERTING FROM TANGENT COORDS TO WORLD COORDS
	vec3 norm = normalize(surfaceNormal);
	vec3 tang = normalize((modelViewMatrix * vec4(tangent, 0.0)).xyz);
	vec3 bitang = normalize(cross(norm, tang));
	
	mat3 toTangentSpace = mat3(
		tang.x, bitang.x, norm.x,
		tang.y, bitang.y, norm.y,
		tang.z, bitang.z, norm.z
	);
	then (any matrix * toTangentSpace)will be in Tangent Coords
*/